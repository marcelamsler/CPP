#include "cute.h"
#include "ide_listener.h"
#include "xml_listener.h"
#include "cute_runner.h"
#include "src/digit.h"
#include <sstream>

void test0() {
	std::ostringstream out { };
	printLargeDigit(0,1,out);
	ASSERT_EQUAL("\n - \n| |\n   \n| |\n - \n", out.str());
}

void test5() {
	std::ostringstream out { };
	printLargeDigit(5,1,out);
	ASSERT_EQUAL("\n - \n|  \n - \n  |\n - \n", out.str());
}

void test9() {
	std::ostringstream out { };
	printLargeDigit(9,1,out);
	ASSERT_EQUAL("\n - \n| |\n - \n  |\n - \n", out.str());
}

void test9size2() {
	std::ostringstream out { };
	printLargeDigit(9,2,out);
	ASSERT_EQUAL("\n -- \n|  |\n|  |\n -- \n   |\n   |\n -- \n", out.str());
}

void test59() {
	std::ostringstream out { };
	printMultipleLargeDigits(59,1,out);
	ASSERT_EQUAL("\n - \n|  \n - \n  |\n - \n\n - \n| |\n - \n  |\n - \n", out.str());
}

void testOutOfBounds() {
	std::ostringstream out { };
	printLargeDigit(10,0,out);
	ASSERT_EQUAL("", out.str());
}

void runAllTests(int argc, char const *argv[]){
	cute::suite s{};
	s.push_back(CUTE(test0));
	s.push_back(CUTE(test5));
	s.push_back(CUTE(test9));
	s.push_back(CUTE(test9size2));
	s.push_back(CUTE(test59));
	s.push_back(CUTE(testOutOfBounds));
	cute::xml_file_opener xmlfile(argc,argv);
	cute::xml_listener<cute::ide_listener<> >  lis(xmlfile.out);
	cute::makeRunner(lis,argc,argv)(s, "AllTests");
}
int main(int argc, char const *argv[]){
    runAllTests(argc,argv);
    return 0;
}



